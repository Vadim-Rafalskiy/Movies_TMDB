type Query {
  keywords(keyWordInput: String, page: Int): KeyWords
  filteredMovies(filters: MoviesFilterInput): Movies
  genres: Genres
  moviesByIds(ids: [Int]): [Movie]
}

input MoviesFilterInput {
  page: Int!
  primary_release_year: Int
  sortDirection: SORT_DIRECTION
  sort_by: String
  with_genres: String
  with_keywords: String
  with_runtime_gte: Int
  with_runtime_lte: Int
}

enum SORT_DIRECTION {
  desc
  asc
}

type KeyWords {
  page: Int!
  totalResults: Int!
  totalPages: Int!
  results: [KeyWord!]!
}

type KeyWord{
  id: ID!
  name: String!
}

type Movies {
  page: Int!
  totalResults: Int!
  totalPages: Int!
  results: [Movie!]!
}

type Movie {
  id: ID!
  title: String!
  originalTitle: String
  runtime: Int
  releaseDate(format: String): String!
  posterPath: String
  genres: [Genre!]!
  adult: Boolean
  overview: String
  originalLanguage: String
  backdropPath: String
  popularity: Float
  voteCount: Int
  video: Boolean
  voteAverage: Float
}

type Genre {
  id: ID!
  name: String
}

type Genres {
  results: [Genre!]!
}
